"","File","Query","SolutionStr","MySolutionStr"
"1","10.txt","} else if (r instanceof CompositeReader) { // only wrap if not already atomic (some tests may fail)","} else {","// enable this by default, for IDE consistency with ant tests (as its the default from ant)"
"2","100.txt","cds = null;","cds = td.getConglomerateDescriptors();","td = null;"
"3","1009.txt","assertEquals(10, cf.getColumnCount());","assert cf.getColumnCount() == 10;","assert cf.getColumnCount() == 10;"
"4","1022.txt","EstimatedHistogram.serializer.serialize(columnnCounts, out);","EstimatedHistogram.serializer.serialize(rowSizes, out);","EstimatedHistogram.serializer.serialize(rowSizes, out);"
"5","1023.txt","public synchronized int getMaxPermits() {","public int getMaxPermits() {","public synchronized void setMaxPermits(int newMax) {"
"6","1028.txt","0, 0);","0, 0, false);","0,"
"7","1039.txt","throws IOException, StandardException {","throws IOException, SQLException, StandardException {","throws IOException, SQLException {"
"8","1043.txt","cs.setString(2, ""TESTLONGVARCHAR"");","cs.setString(2, ""testLongVarChar"");","cs.setString(1, ""APP"");"
"9","1044.txt","return ""http://"" + hostAndPort + (path.isEmpty() ? """" : (""/"" + path));","return ""http://"" + hostAndPort + ""/"" + path;","return;"
"10","1048.txt","return sqlStateSQL99;","return JDBC30Translation.SQL_STATE_SQL99;","return false;"
"11","105.txt","assertTrue(result + "" is not equal to "" + ""d"", result.getLabel().equals(""d""));","assertTrue(result + "" is not equal to "" + ""unknown"", result.getLabel().equals(""unknown""));","assertTrue(result + "" is not equal to "" + ""e"", result.getLabel().equals(""e""));"
"12","1053.txt","if (jvmflags != null && jvmflags.length() > 0)","if (jvmflags != null)","if ((jvmflags != null) && (jvmflags.length() > 0))"
"13","1062.txt","assert !isBootstrapMode; // bootstrap will block until finished","assert !isBootstrapMode; // bootstrap will block until finishec","assert token != null; // should not be called before initServer sets this"
"14","107.txt","if (dto.numTerms() == 0) {","if (te == null) {","if (s.length() > 0) {"
"15","1071.txt","File dirFile = _TestUtil.getTempDir(""deletetest"");","File dirFile = new File(TEMP_DIR, ""deletetest"");","File dirFile = _TestUtil.getTempDir(""TestIndexReader.testFilesOpenClose"");"
"16","108.txt","return IndexFileNames.fileNameFromGeneration(name, IndexFileNames.SEPARATE_NORMS_EXTENSION + number, normGen.get(number));","return IndexFileNames.fileNameFromGeneration(name, ""s"" + number, normGen.get(number));","return IndexFileNames.fileNameFromGeneration(name, IndexFileNames.DELETES_EXTENSION, delGen);"
"17","1084.txt","if (fi.normsPresent()) {","if (fi.isIndexed && !fi.omitNorms) {","if (fi.storeTermVector) {"
"18","1087.txt","System.out.println(""zkcli.sh -zkhost localhost:9983 -cmd "" + MAKEPATH + "" /apache/solr"");","System.out.println(""zkcli.sh -zkhost localhost:9983 -cmd "" + MAKEPATH + "" /apache/solr/data.txt 'config data'"");","System.out.println(""zkcli.sh -zkhost localhost:9983 -cmd "" + CLEAR + "" /solr"");"
"19","1107.txt","new Integer(len));","new Integer(length));","new Integer(length));"
"20","1114.txt","assertQ(req(""id:42 AND subword:\""IBM'sx\"""")","assertQ(req(""id:42 AND subword:IBM'sx"")","assertQ(req(""id:42 AND subword:\""I B M\"""")"
"21","1117.txt","logMsg(LINE);","istream.println(LINE);","logMsg(osInfo);"
"22","1118.txt","valueString = new String(readBytes, ""US-ASCII"");","valueString = new String(readBytes);","valueString = new String(readBytes);"
"23","1237.txt","queryFactory.addBuilder(""UserQuery"",new UserInputQueryBuilder(parser));","queryFactory.addBuilder(""UserQuery"",new UserInputQueryBuilder(new QueryParser(""contents"", analyzer)));","queryFactory.addBuilder(""TermQuery"",new TermQueryBuilder());"
"24","1238.txt","throw new UnavailableException();","throw new InvalidRequestException(""This node cannot accept reads until it has bootstrapped"");","throw new RuntimeException(e);"
"25","1239.txt","public void forceFlush()","void forceFlush() throws IOException","public void run()"
"26","1256.txt","int port = DatabaseDescriptor.getThriftPort();","int port = 9160;","return DatabaseDescriptor.getTables();"
"27","1258.txt","for (int i = 0; i < length; i++) { // Loop to length-1, not length-2, not for diffs but average item pref","for (int i = 0; i < length - 1; i++) {","for (int i = 0; i < length; i++) {"
"28","1263.txt","String REPLICATION_NOT_IN_MASTER_MODE                          = ""XRE07"";","String REPLICATION_UNABLE_TO_STOP_MASTER                       = ""XRE07"";","String REPLICATION_NOT_IN_SLAVE_MODE                           = ""XRE40"";"
"29","1273.txt","logger.info(""Listening for thrift clients..."");","logger.info(""Cassandra starting up..."");","logger.info(""Cassandra shutting down..."");"
"30","1295.txt","if (resultColumn.isGenerated())","if (resultColumn.isGenerated() || resultColumn.isGeneratedForUnmatchedColumnInInsert())","if ((! resultColumn.isReferenced()) &&"
"31","130.txt","fs.delete(outpath, true);","FileUtil.fullyDelete(fs, outpath);","sorter.merge(outfiles, output);"
"32","1301.txt","+info+"". Triggers got fired in this order:""+TRIGGER_INFO.get().toString(), orderOk);","+info, orderOk);","int fireCount = assertFiringOrder(""INSERT"", 1);"
"33","1302.txt","if (userIDs.length > 3) {","if (result.length() > 3) {","if (userIDs == null) {"
"34","1309.txt","((TieredMergePolicy) w.getConfig().getMergePolicy()).setForceMergeDeletesPctAllowed(10.0);","tmp.setForceMergeDeletesPctAllowed(10.0);","TieredMergePolicy tmp = newTieredMergePolicy();"
"35","131.txt","return buffer[pos++];","return (byte) (buffer[pos++] & 0xff);","return buffer[pos++] != 0;"
"36","1310.txt","((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundFile(false);","mergePolicy.setUseCompoundFile(false);","LogMergePolicy mergePolicy = newLogMergePolicy(true, 10);"
"37","1313.txt","return ""abs"";","return ""log"";","return ""sqrt"";"
"38","1318.txt","return reader.read(ob, dec);","return new SpecificDatumReader<T>(writer).read(ob, dec);","writer.write(o, enc);"
"39","132.txt","byte val = reader.readByte();","int val = reader.readByte();","byte b = reader.readByte();"
"40","1328.txt","if (mergedSegmentWarmer != null) {","if (poolReaders && mergedSegmentWarmer != null) {","if (merge.readers[i] != null) {"
"41","133.txt","if (builder.length() > 0 && builder.length() < maxLength) {","if (builder.length() > 0) {","if (builder.length() + value.length() > maxLength) {"
"42","1336.txt","public Column(byte[] name, byte[] value)","Column(byte[] name, byte[] value)","public Column(byte[] name, byte[] value, long timestamp)"
"43","1337.txt","{""XSLA4"",""Error encountered when attempting to write the transaction recovery log. Most likely the disk holding the recovery log is full. If the disk is full, the only way to proceed is to free up space on the disk by either expanding it or deleting files not related to Derby. It is also possible that the file system and/or disk where the Derby transaction log resides is read-only. The error can also be encountered if the disk or file system has failed."",""45000""},","{""XSLA4"",""Cannot write to the log, most likely the log is full.  Please delete unnecessary files.  It is also possible that the file system is read only, or the disk has failed, or some other problems with the media.  "",""45000""},","{""08004"",""Connection authentication failure occurred. Either the supplied credentials were invalid, or the database uses a password encryption scheme not compatible with the strong password substitution security mechanism. If this error started after upgrade, refer to the release note for DERBY-4483 for options."",""40000""},"
"44","1341.txt","public Integer concurrent_compactors = Runtime.getRuntime().availableProcessors();","public Boolean compaction_multithreading = true;","public Integer concurrent_replicates = 32;"
"45","1369.txt","Thread.sleep( 2000 ); // wait 2 seconds...","Thread.sleep( 2000 ); // wait 1/2 seconds...","Thread.sleep( 500 ); // wait 1/2 seconds..."
"46","1409.txt","assertEquals(""count"", 4, count);","assertEquals(""count"", 3, count);","assertEquals(""count"", 5, count);"
"47","1426.txt","""{0}"", ""1"", ""0"", null, ""0"", ""0"", ""btree"",","""{0}"", ""1"", ""0"", ""1"", ""0"", ""0"", ""btree"",","""{0}"", ""1"", ""0"", ""1"", ""0"", ""0"", ""btree"","
"48","1429.txt","throw new IndexException(index, size());","throw new IndexException();","throw new IndexException();"
"49","1430.txt","throw new CardinalityException(c[COL], o[ROW]);","throw new CardinalityException();","throw new CardinalityException();"
"50","1431.txt","throw new CardinalityException(size(), v.size());","throw new CardinalityException();","throw new CardinalityException(size(), x.size());"
"51","144.txt","assert enumerator.position == tiOrd.termOrd;","assert (int) enumerator.position == tiOrd.termOrd;","assert (int) enumerator.position == tiOrd.termOrd;"
"52","1451.txt","0, 0);","0, 0, false);","0,"
"53","1459.txt","if (binaryMemtable_.get().isClean())","if (memtable_.isClean())","if (memtable_.isClean())"
"54","1469.txt","""0 AS DATA_TYPE,"" +","""SMALLINT(0) AS DATA_TYPE,"" +","""0 AS SQL_DATA_TYPE,"" +"
"55","148.txt","if (usingDerbyNetClient()) {","if (c instanceof org.apache.derby.client.am.Connection) {","while (tables.next()) {"
"56","1481.txt","destTaxWriter.addTaxonomy(srcTaxDir, map);","destTaxWriter.addTaxonomies(new Directory[] { srcTaxDir }, new OrdinalMap[] { map });","destTaxWriter.commit();"
"57","1489.txt","throw new IllegalArgumentException(""faulty slice operation: bra="" + bra + "",ket="" + ket + "",limit="" + limit);","System.err.println(""faulty slice operation"");","modification, are permitted provided that the following conditions are met:"
"58","1496.txt","public void convict(InetAddress ep);","public void suspect(InetAddress ep);","public void revive(InetAddress ep);"
"59","15.txt","assert request.range.contains(sample.token): ""Token "" + sample.token + "" is not within range "" + request.range;","assert request.range.contains(sample.token);","assert request.range.contains(row.key.token) : row.key.token + "" is not contained in "" + request.range;"
"60","1502.txt","docID = upto = -1;","upto = -1;","docID = -1;"
"61","1509.txt","String queryID;","private String queryID;","String queryID = st.nextToken();"
"62","1510.txt","assertEquals( ""subInfos=(d((9,10)))/1.0(3,103)"", ffl.fragInfos.get( 0 ).toString() );","assertEquals( ""subInfos=(d((6,7)))/1.0(0,100)"", ffl.fragInfos.get( 0 ).toString() );","assertEquals( ""subInfos=(b((2,3)))/1.0(0,20)"", ffl.fragInfos.get( 0 ).toString() );"
"63","1512.txt","assertEquals( ""d(1.0)((9,10))"", fpl.phraseList.get( 0 ).toString() );","assertEquals( ""d(1.0)((6,7))"", fpl.phraseList.get( 0 ).toString() );","assertEquals( ""a(1.0)((0,1))"", fpl.phraseList.get( 0 ).toString() );"
"64","1573.txt","writer.close();","writer.shutdown(false);","reader.close();"
"65","1576.txt","String columnFamily = CliCompiler.getColumnFamily(statement, keyspacesMap.get(keySpace).cf_defs);","String columnFamily = statement.getChild(0).getText();","String columnFamily = CliCompiler.getColumnFamily(columnFamilySpec, keyspacesMap.get(keySpace).cf_defs);"
"66","1590.txt","RandomIndexWriter iw = new RandomIndexWriter(random(), dir, cfg);","RandomIndexWriter iw = new RandomIndexWriter(random(), dir);","RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);"
"67","160.txt","exclusions = exclusiontable.keySet();","exclusions = new HashSet(exclusiontable.keySet());","exclusions = exclusiontable;"
"68","1603.txt","if (!se.isLockTimeout())","if (!se.getMessageId().equals(SQLState.LOCK_TIMEOUT))","if (savePoints.size() > 20)"
"69","1605.txt","else if (se.isLockTimeout())","else if (SQLState.LOCK_TIMEOUT.equals(se.getMessageId()))","else"
"70","1615.txt","return (DatabaseDescriptor.getReplicationFactor(table) / 2) + 1;","return (DatabaseDescriptor.getQuorum(table)/ 2) + 1;","return DatabaseDescriptor.getReplicationFactor(table);"
"71","1627.txt","protected Query getFieldQuery(String field, String queryText, boolean quoted)","protected Query getFieldQuery(String field, String queryText)","protected Query getFieldQuery(String field, String queryText, int slop)"
"72","1629.txt","zkStateReaderMock.getBaseUrlForNodeName(address);","solrZkClientMock.getBaseUrlForNodeName(address);","zkStateReaderMock.getClusterState();"
"73","1666.txt","while (_termPositionsQueue.peek() != null && target > _termPositionsQueue.peek().doc())","while (target > _termPositionsQueue.peek().doc())","while (_termPositionsQueue.size() > 0)"
"74","1675.txt","return mergeShardsChance;","return readRepairChance;","return readRepairChance;"
"75","1677.txt","return new Leaf(Double.NaN);","return new Leaf(-1);","return new Leaf(label);"
"76","1721.txt","0),","false),","drillDownTerm.field(), drillDownTerm.bytes(),"
"77","1729.txt","0);","false);","for(int i=0;i<NUM_THREADS;i++)"
"78","1732.txt","0);","false);","});"
"79","1737.txt","0);","false);","for (int i = 0; i < map1.maxDoc(); ++i) {"
"80","1746.txt","0);","false);","tiq.pop(); // remove lowest in tiq"
"81","175.txt","this.localeFinder = other.localeFinder;","this.localeFinder = localeFinder;","this.localeFinder = localeFinder;"
"82","1761.txt","if (totalCharsSoFar > -1) {","if (totalCharsSoFar != -1) {","if (totalCharsSoFar != -1) {"
"83","1769.txt","return buildUrl(jetty.getLocalPort(), ""/solr"");","return ""http"" + (isSSLMode() ? ""s"" : """") +""://127.0.0.1:"" + jetty.getLocalPort() + ""/solr"";","return jetty;"
"84","1772.txt","return buildUrl(port, ""/solr"");","return ""http"" + (isSSLMode() ? ""s"" : """") + ""://127.0.0.1:"" + port + ""/solr"";","return;"
"85","1773.txt","the index.</LI>","the index, this can only happen if this is not a user transaction.</LI>","the database."
"86","1778.txt","""term (phrase1 phrase2) term"");","""term phrase1 phrase2 term"");","""+term -(phrase1 phrase2) term"");"
"87","1784.txt","System.out.println(Thread.currentThread().getName() + "": EXC: "");","System.out.println(""EXC: "");","System.out.println(Thread.currentThread().getName() + "": NOW FAIL: "" + name);"
"88","179.txt","final synchronized long getRecomputedActualSizeInBytes() {","final long getRecomputedActualSizeInBytes() {","public synchronized final long getRecomputedSizeInBytes() {"
"89","1797.txt","docID = upto = -1;","upto = -1;","docID = -1;"
"90","1806.txt","cs.setString(2, ""TESTLONGVARCHAR"");","cs.setString(2, ""testLongVarChar"");","cs.setString(1, ""APP"");"
"91","1812.txt","logger_.error(""error closing "" + ci, th);","logger_.error(th);","logger_.error(""Corrupt file "" + filename, ex);"
"92","1814.txt","return 1;","return -1;","return -1;"
"93","1856.txt","privExists(getMirrorControlFileName()))","getMirrorControlFileName().exists())","if (privExists(logControlFileName))"
"94","1866.txt","return supportsUDTs_;","return supportsSessionDataCaching_;","return supportsQryclsimp_;"
"95","1881.txt","sb.append(Format.format(2, ad[n],template));","sb.append(Format.format(2, (float) ad[n],template));","sb.append(Format.format(ai[n],template));"
"96","1926.txt","return copy(Version.LUCENE_30, set);","return (set instanceof CharArraySet) ? copy((CharArraySet) set) : copy(Version.LUCENE_30, set);","return code;"
"97","1931.txt","return (Class<? extends ListResourceBundle>) b.loadClass(bundleName);","return b.loadClass(bundleName);","result = new PropertyResourceBundle(url.openStream());"
"98","1934.txt","Path clustersIn = new Path(output, ""clusters-8-final"");","Path clustersIn = new Path(output, ""clusters-7-final"");","Path clustersIn = new Path(output, ""clusters-0-final"");"
"99","1938.txt","public static String simpleTag(String tag, String... args) {","private static String simpleTag(String tag, String... args) {","public static String deleteById(String id, String... args) {"
"100","1954.txt","this.xid = null;","xid = null;","xid = null;"
"101","1955.txt","ntt.commit();","ntt.commitNoSync(Transaction.RELEASE_LOCKS);","ntt.close();"
"102","1975.txt","if (uniqueTerms.size() > 1) {","if (i > 0) {","if (!terms.contains(t)) {"
"103","1982.txt","privExists(getMirrorControlFileName()))","getMirrorControlFileName().exists())","if (privExists(logControlFileName))"
"104","1991.txt","return new HeapRowLocation();","return null;","return new HeapRowLocation(this);"
"105","20.txt","current = start;","current = newText.getIndex();","current = end;"
"106","2009.txt","assertQ(req(""id:42 AND subword:\""IBM'sx\"""")","assertQ(req(""id:42 AND subword:IBM'sx"")","assertQ(req(""id:42 AND subword:\""I B M\"""")"
"107","2025.txt","return ByteBufferUtil.bytes(source, Charsets.US_ASCII);","return ByteBuffer.wrap(source.getBytes(Charsets.US_ASCII));","return ByteBufferUtil.string(bytes, Charsets.US_ASCII);"
"108","2026.txt","String STORE_DATA_SEG_BACKUP_COMPLETED  = ""D006"";","String STORE_COPIED_DB_DIR              = ""D006"";","String STORE_BACKUP_COMPLETED           = ""D012"";"
"109","2033.txt","logger.debug(""Command/ConsistencyLevel is {}/{}"", command.toString(), consistency_level);","logger.debug(command.toString());","logger.debug(""Command/ConsistencyLevel is {}/{}"", command, consistency_level);"
"110","2035.txt","StopFilter stpf = new StopFilter(TEST_VERSION_CURRENT, new MockTokenizer(new StringReader(""test of""), MockTokenizer.WHITESPACE, false), stopSet);","StopFilter stpf = new StopFilter(Version.LUCENE_40, new MockTokenizer(new StringReader(""test of""), MockTokenizer.WHITESPACE, false), stopSet);","StopFilter stpf0 = new StopFilter(TEST_VERSION_CURRENT, new MockTokenizer(reader, MockTokenizer.WHITESPACE, false), stopSet0); // first part of the set"
"111","2045.txt","input.readInt(); // Read total size","int totalSize = input.readInt();","int msheader = input.readInt();"
"112","2046.txt","return o2.compareTo(o1);","return -o1.compareTo(o2);","return o1.compareTo(o2);"
"113","2058.txt","public static String simpleTag(String tag, String... args) {","private static String simpleTag(String tag, String... args) {","public static String deleteById(String id, String... args) {"
"114","2066.txt",".println(""          <A href=\""http://aries.apache.org/\"" title=\""Apache Aries \"">"");",".println(""          <A href=\""http://aries.apache.org/aries/\"" title=\""Apache Aries \"">"");",".println(""          <IMG border=\""0\"" src=\""images/feather.png\"">"");"
"115","2070.txt","if (keepCurrentDefault)","if (defaultNode == null)","if (isAutoincrement == false)"
"116","2088.txt","result.put(colName, resultSet.getTimestamp(colName));","result.put(colName, resultSet.getDate(colName));","result.put(colName, resultSet.getBytes(colName));"
"117","2090.txt","if (u1.version() == 1 && u2.version() == 1)","if (u1.version() == 1)","if (u1.version() != u2.version())"
"118","2095.txt","ref.copyChars(charArray, offset, length);","ref.copy(charArray, offset, length);","ref.append(charArray, offset, length);"
"119","2111.txt","for (int i = 0; i < 100*_TestUtil.getRandomMultiplier(); i++) {","for (int i = 0; i < 10; i++) {","for (int i = 1; i < numFields; i++) {"
"120","2112.txt","void incRef(Collection<String> files) throws IOException {","void incRef(List<String> files) throws IOException {","void decRef(Collection<String> files) throws IOException {"
"121","2115.txt","+info+"". Triggers got fired in this order:""+TRIGGER_INFO.get().toString(), orderOk);","+info, orderOk);","int fireCount = assertFiringOrder(""INSERT"", 1);"
"122","2116.txt","logMsg(LINE);","istream.println(LINE);","logMsg(osInfo);"
"123","2127.txt","handleResponse(OverseerCollectionProcessor.DELETEALIAS, m, rsp);","handleResponse(OverseerCollectionProcessor.CREATEALIAS, m, rsp);","handleResponse(OverseerCollectionProcessor.DELETESHARD, m, rsp);"
"124","2133.txt","public int size() {","public int size() throws IOException {","public int numDocs() {"
"125","2136.txt","maxCapacity,","-1,                 // RESOLVE - when should it go to disk?","stopSearchOperator,"
"126","2143.txt","false);","0);","fail();"
"127","2146.txt","false);","0);","false, codec, null, null),"
"128","2148.txt","false);","0);","d.close();"
"129","2167.txt","false),","0),","if (!advance(p2, d1)) {"
"130","217.txt","Query query = c.query.rewrite(reader);    // rewrite first","Query query = c.query;","Query query = c.query.rewrite(reader);"
"131","2171.txt","false);","0);","else {"
"132","2174.txt","{""XSLA4"",""Error encountered when attempting to write the transaction recovery log. Most likely the disk holding the recovery log is full. If the disk is full, the only way to proceed is to free up space on the disk by either expanding it or deleting files not related to Derby. It is also possible that the file system and/or disk where the Derby transaction log resides is read-only. The error can also be encountered if the disk or file system has failed."",""45000""},","{""XSLA4"",""Cannot write to the log, most likely the log is full.  Please delete unnecessary files.  It is also possible that the file system is read only, or the disk has failed, or some other problems with the media.  "",""45000""},","{""08004"",""Connection authentication failure occurred. Either the supplied credentials were invalid, or the database uses a password encryption scheme not compatible with the strong password substitution security mechanism. If this error started after upgrade, refer to the release note for DERBY-4483 for options."",""40000""},"
"133","2176.txt","""select a, length(a), b from testClobTriggerB order by b"");","""select a, length(a), b from testClobTriggerA order by b"");","""select a, length(a), b from testClobTriggerA order by b"");"
"134","2178.txt","FullRunningAverageAndStdDevWritable.class,","FloatWritable.class,","VarLongWritable.class,"
"135","2182.txt","sessionState.out.println(""      Compaction Strategy Options:"");","sessionState.out.printf(""      Compaction Strategy Options: %s%n"", cf_def.compaction_strategy);","sessionState.out.println(""   Schema versions: "");"
"136","2189.txt","return v == null ? 0 : v;","return v == null ? 0.01 : v;","return v == null ? 0.01 : v;"
"137","2199.txt","return getCFMetaData(tableName, cfName).subcolumnComparator;","return getCFMetaData(tableName, cfName).comparator;","return getCFMetaData(tableName, cfName).comparator;"
"138","220.txt","/* not until java 6 @Override */","@Override","/** Gets the locale to run tests with */"
"139","2209.txt","throws IOException, StandardException {","throws IOException, SQLException, StandardException {","throws IOException, SQLException {"
"140","2211.txt","destTaxWriter.addTaxonomy(srcTaxDir, map);","destTaxWriter.addTaxonomies(new Directory[] { srcTaxDir }, new OrdinalMap[] { map });","destTaxWriter.commit();"
"141","2213.txt","URL url = new URL( ""http://svn.apache.org/repos/asf/lucene/dev/trunk/"" );","URL url = new URL( ""http://svn.apache.org/repos/asf/lucene/solr/trunk/"" );","stream = new ContentStreamBase.URLStream( url );"
"142","2216.txt","if (r2 != null) {","if (r2 != r) {","if (td != null) {"
"143","2221.txt","this.columns = (ResultColumnDescriptor[]) ArrayUtil.copy( columns );","this.columns = columns;","return (ResultColumnDescriptor[]) ArrayUtil.copy( columns );"
"144","2227.txt","new BytesType(),","new UTF8Type(),","new UTF8Type(),"
"145","2228.txt","final int size = allInstances.size();","final int size=0;","final int count = allInstances.size();"
"146","2233.txt","super(core, updateHandler.getUpdateLog());","super(core);","super(core);"
"147","2238.txt","NamedList<Object> commands = new SimpleOrderedMap<Object>();","NamedList<Object> commands = new NamedList<Object>();","NamedList<Object> command = new SimpleOrderedMap<Object>();"
"148","2239.txt","generateTime - beginTime, //total compile time","getElapsedTimeMillis(beginTime),","generateTime - optimizeTime, //generate time"
"149","2240.txt","return -result;","return result / model.thetaNormalizer(label);","return r;"
"150","2241.txt","assertUpdatePrivilege(true, users[4], ""S1"", ""T1"", new String[] {""C2"", ""C3""});","assertUpdatePrivilege(false, users[4], ""S1"", ""T1"", new String[] {""C2"", ""C3""});","assertUpdatePrivilege(true, users[2], ""S2"", ""T1"", new String[] {""C1"", ""C3""});"
"151","2249.txt","public static final JDBCClient DERBYNETCLIENT= new JDBCClient(","static final JDBCClient DERBYNETCLIENT= new JDBCClient(","public static final JDBCClient EMBEDDED_30= new JDBCClient("
"152","2252.txt","assertTrue(qr.hasFullRank());","assertFalse(qr.hasFullRank());","assertFalse(qr.hasFullRank());"
"153","2258.txt","return token.toString();","return ""Token("" + token + "")"";","return token.hashCode();"
"154","2277.txt","if (!columnNames.isEmpty())","if (columnNames != EMPTY_COLUMNS)","if (columns.size() > 0)"
"155","2278.txt","AvroValidation.validateColumnPath(keyspace, newColumnPath(cfName, null, cosc.column.name));","AvroValidation.validateColumnPath(keyspace, newColumnPath(cfName, cosc.super_column.name, cosc.column.name));","AvroValidation.validateColumnPath(keyspace, newColumnPath(cfName, cosc.super_column.name, c.name));"
"156","2284.txt","if ((rc != XAResource.XA_OK ) && (rc != XAResource.XA_RDONLY)) {","if (rc != XAResource.XA_OK) {","if (rc != XAResource.XA_OK)"
"157","2286.txt","new String[][] {{""1"",null}});","null);","new String[][] {{""1""} });"
"158","2289.txt","assertEquals(""count"", 3, count);","assertEquals(""count"", 4, count);","assertEquals(""count"", 5, count);"
"159","2292.txt","if (resultColumn.isGenerated())","if (resultColumn.isGenerated() || resultColumn.isGeneratedForUnmatchedColumnInInsert())","if ((! resultColumn.isReferenced()) &&"
"160","2310.txt","throw new InvalidRequestException(""supercolumn parameter is not optional for super CF "" + column_path.column_family);","throw new InvalidRequestException(""column parameter is not optional for super CF "" + column_path.column_family);","throw new InvalidRequestException(""supercolumn parameter is invalid for standard CF "" + column_path.column_family);"
"161","2314.txt","indexStream.seek((docStoreOffset+startDocID) * 8L);","indexStream.seek(startDocID * 8L);","indexStream.seek((n + docStoreOffset) * 8L);"
"162","232.txt","int retValue = stream.read(b, off, actualLength);","int retValue = super.read(b, off, actualLength);","int retValue = stream.read(b, 0, actualLength);"
"163","2330.txt","catch (Throwable e)","catch (Exception e)","catch (TException e)"
"164","2331.txt","this.xid = null;","xid = null;","xid = null;"
"165","2334.txt","return _exportServices;","return _exportPackages;","return _importServices;"
"166","2341.txt","dir.sync(Collections.singleton(fileName));","dir.sync(fileName);","dir.deleteFile(fileName);"
"167","2345.txt","zkController.getZkStateReader().addShardZkNodeWatches();","zkController.addShardZkNodeWatches();","zkController.getZkStateReader().updateCloudState(true);"
"168","2348.txt","consolePropertyMessage(""DRDA_MissingValue.U"", ""DRDA_SslMode.I"");","setSSLMode(SSL_OFF);","consolePropertyMessage(""DRDA_MissingValue.U"", ""DRDA_User.I"");"
"169","2350.txt","return true;","return false;","return false;"
"170","2358.txt","//@Override -- not until Java 1.6","@Override","@Override"
"171","237.txt","public enum Type {","enum Type {","public static enum Mode {"
"172","2371.txt","valueString = new String(readBytes, ""US-ASCII"");","valueString = new String(readBytes);","valueString = new String(readBytes);"
"173","2376.txt","throw new SQLException(""column 3 is NOT ai!"");","throw new SQLException(""column 2 is NOT ai!"");","throw new SQLException(""column 1 is NOT ai!"");"
"174","2390.txt","if (rows < 0) {","if (rows < 0 || (maxRows_ != 0 && rows > maxRows_)) {","if (rows > 0) {"
"175","2422.txt","assertTrue(deleteReader.getDeletedDocs().get(0));","assertTrue(deleteReader.isDeleted(0) == true);","assertTrue(deleteReader.numDocs() == 0);"
"176","2434.txt","return supportsBooleanValues_;","return supportsUDTs_;","return supportsUDTs_;"
"177","2437.txt","return ""http://"" + hostAndPort + (path.isEmpty() ? """" : (""/"" + path));","return ""http://"" + hostAndPort + ""/"" + path;","return;"
"178","2446.txt","if (cf == null || cf.getColumnCount() == 0)","if (cf == null)","if (cf == null)"
"179","245.txt","positionsIncrements[i] = _TestUtil.nextInt(random(), 1, 1 << 18);","positionsIncrements[i] = random().nextInt(1 << 18);","positionsIncrements[i] = _TestUtil.nextInt(random(), 1, 1 << 5);"
"180","2458.txt","maxScale = 31; // Max Scale for Decimal & Numeric is 31: Derby-2262","maxScale = 32767; // 31; BUG DERBY-2262","maxScale = 6;"
"181","248.txt","valueString = new String(readBytes, ""US-ASCII"");","valueString = new String(readBytes);","valueString = new String(readBytes);"
"182","2485.txt","private static volatile Gossiper gossiper_;","static Gossiper gossiper_;","private static Logger logger_ = Logger.getLogger(Gossiper.class);"
"183","2487.txt","public  static  String   varchar_String_String( Object a ) { return ""-1""; }","//    public  static  String   varchar_String_String( Object a ) { return ""-1""; }","public  static  String   varchar_String_String( byte a ) { return ""-1""; }"
"184","2495.txt","if (!se.isLockTimeout())","if (!se.getMessageId().equals(SQLState.LOCK_TIMEOUT))","if (savePoints.size() > 20)"
"185","2497.txt","else if (se.isLockTimeout())","else if (SQLState.LOCK_TIMEOUT.equals(se.getMessageId()))","else"
"186","2501.txt","builder.append(filter);","builder.append('(').append(filter).append(')');","builder.append(')');"
"187","2503.txt","if (!se.isLockTimeout())","if (!se.getMessageId().equals(SQLState.LOCK_TIMEOUT))","if (savePoints.size() > 20)"
"188","2505.txt","else if (se.isLockTimeout())","else if (SQLState.LOCK_TIMEOUT.equals(se.getMessageId()))","else"
"189","2519.txt","dd.pushDataDictionaryContext(cm);","dd.pushDataDictionaryContext(cm, false);","pushDataDictionaryContext(cm);"
"190","2523.txt","return (int) getLong();","return (int) Double.doubleToLongBits(getDouble());","return (int) lv;"
"191","2531.txt","{""ID"", ""2"", ""INTEGER NOT NULL"", ""GENERATED_BY_DEFAULT"", ""3"", ""1"", ""1"", ""D3175"", ""T"", ""R""}","{""ID"", ""2"", ""INTEGER NOT NULL"", ""GENERATED_BY_DEFAULT"", ""22"", ""1"", ""1"", ""D3175"", ""T"", ""R""}","{""ID"", ""3"", ""INTEGER NOT NULL"", ""GENERATED_BY_DEFAULT"", ""1"", ""1"", ""1"", ""D3175"", ""T"", ""R""}"
"192","2538.txt","public static final String VER = ""ver"";","private static final String VER = ""ver"";","public static final String OVERWRITE = ""ow"";"
"193","2554.txt","coreContainer.register(core, false);","coreContainer.register(dcore.getName(), core, false);","coreContainer.register(name, core, false);"
"194","2556.txt","if (traceDirectory != null)","if (!PrivilegedFileOps.exists(traceDirectory))","if (comBufferWriter != null)"
"195","2560.txt","if (!se.isLockTimeout())","if (!se.getMessageId().equals(SQLState.LOCK_TIMEOUT))","if (savePoints.size() > 20)"
"196","2562.txt","else if (se.isLockTimeout())","else if (SQLState.LOCK_TIMEOUT.equals(se.getMessageId()))","else"
"197","2570.txt","super(PER_FIELD_REUSE_STRATEGY);","super(new PerFieldReuseStrategy());","super(input);"
"198","2571.txt","super(PER_FIELD_REUSE_STRATEGY);","super(new PerFieldReuseStrategy());","super(input);"
"199","2639.txt","CompactionManager.instance.submitMajor(cfStore).get();","cfStore.doCompaction(2, cfStore.getSSTables().size());","table.getColumnFamilyStore(""Standard2"").forceBlockingFlush();"
"200","2651.txt","if (jvmflags != null && jvmflags.length() > 0)","if (jvmflags != null)","if ((jvmflags != null) && (jvmflags.length() > 0))"
"201","2652.txt","innerCache.put(key, value);","innerCache.put(reader, value);","innerCache.put(key, progress.value);"
"202","2658.txt","chars[i++] = (char) nextInt(random, 0x80, 0x7ff);","chars[i++] = (char) nextInt(random, 0x80, 0x800);","chars[i++] = (char) nextInt(random, 0x800, 0xd7ff);"
"203","2667.txt","}, ""PERIODIC-COMMIT-LOG-SYNCER"").start();","}).start();","}"
"204","2670.txt","stmt = conn.prepareStatement(getPreferenceTimeSQL, ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);","stmt = conn.prepareStatement(getPreferenceSQL, ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);","stmt = conn.prepareStatement(getPreferenceSQL, ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);"
"205","2676.txt","this.minSimilarity = 0; // just driven by number of edits","this.minSimilarity = 1 - (minSimilarity+1) / this.termLength;","this.minSimilarity = minSimilarity;"
"206","2685.txt","if ( (rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES)!=0 || rb.getSortSpec().includesScore()) {","if (rb.getSortSpec().includesScore()) {","if (!req.getParams().getBool(ShardParams.IS_SHARD,false) && rb.getResults().docList != null && rb.getResults().docList.size()<=50) {"
"207","2693.txt","return getValues(reader);","return null;","return getValues(null, reader);"
"208","2699.txt","private int hasProx = CHECK_FIELDINFO;     // True if this segment has any fields with positional information","private int hasProx = CHECK_FIELDINFO;     // True if this segment has any fields with omitTermFreqAndPositions==false","static final int WITHOUT_GEN = 0;  // a file name that has no GEN in it."
"209","2707.txt","if (!result.isDigestQuery())","if (result.isDigestQuery())","if (result.isDigestQuery())"
"210","2708.txt","// Not in Java 5: @Override","@Override","private final ExecutorService es;"
"211","272.txt","throws InvalidRequestException, UnavailableException","throws InvalidRequestException, NotFoundException, UnavailableException","throws InvalidRequestException, TException, UnavailableException"
"212","2721.txt","suite.addTest(InterruptResilienceTest.suite());","suite.addTest(Derby151Test.suite());","suite.addTest(BackupRestoreTest.suite());"
"213","2728.txt","} else if (indexReader != null) {","} else {","} else {"
"214","2735.txt","public final static String rangeVerbHandler_ = ""RANGE-VERB-HANDLER"";","public static String rangeVerbHandler_ = ""RANGE-VERB-HANDLER"";","public final static String readVerbHandler_ = ""ROW-READ-VERB-HANDLER"";"
"215","2739.txt","<li> {@link MultiPhraseQuery}","<li> {@link PhrasePrefixQuery}","<li> {@link MultiTermQuery}"
"216","2740.txt","termState.skipFP = 0;","termState.skipFP = termState.bytesReader.readVLong();","termState.skipFP = termState.bytesReader.readVLong();"
"217","2742.txt","random = true;","random = Boolean.parseBoolean(cmd.getOptionValue(""r""));","return out;"
"218","2780.txt","return Double.NaN;","return 0.0;","return Double.parseDouble(data);"
"219","2781.txt","String rawColumName = CliUtils.unescapeSQLString(statement.getChild(1).getText());","String rawColumName = statement.getChild(1).getText();","String value = CliUtils.unescapeSQLString(statement.getChild(1).getText());"
"220","2784.txt","Property.STORAGE_AUTO_INDEX_STATS_DEBUG_KEEP_DISPOSABLE_STATS);","Property.STORAGE_AUTO_INDEX_STATS_DEBUG_FORCE_OLD_BEHAVIOR);","Property.STORAGE_AUTO_INDEX_STATS_DEBUG_QUEUE_SIZE_DEFAULT);"
"221","2787.txt","connection_.CommitAndRollbackListeners_.add(this);","connection_.CommitAndRollbackListeners_.put(this,null);","connection_.CommitAndRollbackListeners_.remove(this);"
"222","2789.txt","connection_.CommitAndRollbackListeners_.add(this);","connection_.CommitAndRollbackListeners_.put(this,null);","connection_.CommitAndRollbackListeners_.remove(this);"
"223","2820.txt","return liveDocs.cardinality();","return (int) liveDocs.cardinality();","return liveDocs;"
"224","2822.txt","} else if (field.equals(""score"")) {","} if (field.equals(""score"")) {","} else if (field.equals(""noscore"")) {"
"225","2823.txt","{10, 3, 1, 4}, // 10.3.1.4 (Aug 1, 2007 / SVN 561794)","{10, 3, 1, 4}, // 10.3.1.4 (Aug 30, 2007 / SVN 571336)","{10, 1, 3, 1}, // 10.1.3.1 (Jun 30, 2006 / SVN 417277)"
"226","2826.txt","return true;","return false;","return false;"
"227","2850.txt","return termsIndex.getValueCount();","return termsIndex.numOrd();","return termsIndex.getOrd(doc);"
"228","287.txt","if ((rc != XAResource.XA_OK ) && (rc != XAResource.XA_RDONLY)) {","if (rc != XAResource.XA_OK) {","if (rc != XAResource.XA_OK)"
"229","2889.txt","StopFilter stpf = new StopFilter(TEST_VERSION_CURRENT, new MockTokenizer(new StringReader(""test of""), MockTokenizer.WHITESPACE, false), stopSet);","StopFilter stpf = new StopFilter(Version.LUCENE_40, new MockTokenizer(new StringReader(""test of""), MockTokenizer.WHITESPACE, false), stopSet);","StopFilter stpf0 = new StopFilter(TEST_VERSION_CURRENT, new MockTokenizer(reader, MockTokenizer.WHITESPACE, false), stopSet0); // first part of the set"
"230","2894.txt","NumericDocValues getNormValues(String field) throws IOException {","NumericDocValues getSimpleNormValues(String field) throws IOException {","NumericDocValues getNumericDocValues(String field) throws IOException {"
"231","2895.txt","return core.getNormValues(field);","return core.getSimpleNormValues(field);","return core.getNumericDocValues(field);"
"232","29.txt","skipRemainder(true);","skipRemainder(false);","skipRemainder(false);"
"233","290.txt","synonymTableName != null ? synonymTableName : targetTableName,","targetTableName,","synonymTableName = targetTableName;"
"234","2911.txt","this.subReaders =  subReaders;","this.subReaders =  subReaders.clone();","this.subReaders =  subReaders.clone();"
"235","2912.txt","IndexWriter writer = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setReaderTermsIndexDivisor(2));","IndexWriter writer = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));","IndexWriter writer = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));"
"236","2921.txt","public int size() throws IOException {","public int getUniqueFieldCount() throws IOException {","public Fields fields() throws IOException {"
"237","2922.txt","public long size() throws IOException {","public long getUniqueTermCount() throws IOException {","public long getSumDocFreq() throws IOException {"
"238","2924.txt","public int size() throws IOException {","public int getUniqueFieldCount() throws IOException {","public String next() throws IOException {"
"239","2925.txt","public abstract long size() throws IOException;","public abstract long getUniqueTermCount() throws IOException;","public abstract long getSumDocFreq() throws IOException;"
"240","2926.txt","public long size() throws IOException {","public long getUniqueTermCount() throws IOException {","public long getSumDocFreq() throws IOException {"
"241","2933.txt","ntt.commit();","ntt.commitNoSync(Transaction.RELEASE_LOCKS);","ntt.close();"
"242","2942.txt","0),","false),","drillDownTerm.field(), drillDownTerm.bytes(),"
"243","2944.txt","0);","false);","});"
"244","2948.txt","0);","false);","for (int i = 0; i < map1.maxDoc(); ++i) {"
"245","2950.txt","0);","false);","for(int i=0;i<NUM_THREADS;i++)"
"246","2964.txt","0);","false);","tiq.pop(); // remove lowest in tiq"
"247","2972.txt","Throwable ex, Object preCallToken) throws Throwable {","Exception ex, Object preCallToken) throws Throwable {","Object returnType, Object preCallToken) throws Throwable {"
"248","2982.txt","t.interrupt();","if (!t.getName().equals(""main-EventThread"")) t.interrupt();","super.starting(method);"
"249","30.txt","public static String getNameFromJdbcType(int jdbcType) {","public static String jdbcNameFromJdbc(int jdbcType) {","public static String sqlNameFromJdbc(int jdbcType) {"
"250","3009.txt","for (int i = 0; i < q; i++) {","for (int i = 0; i < q; q--) {","for (int i = 0; i < m; i++) {"
"251","3025.txt","if (expectedRows >= 0)","if (rows >= 0)","if (expectedRow[i] != null)"
"252","3030.txt","((TieredMergePolicy) w.getConfig().getMergePolicy()).setForceMergeDeletesPctAllowed(10.0);","tmp.setForceMergeDeletesPctAllowed(10.0);","TieredMergePolicy tmp = newTieredMergePolicy();"
"253","3031.txt","((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundFile(false);","mergePolicy.setUseCompoundFile(false);","LogMergePolicy mergePolicy = newLogMergePolicy(true, 10);"
"254","304.txt","assertEquals(pair.output, output);","assertEquals(output, pair.output);","assertEquals(pair.output, t.output);"
"255","3045.txt","String.class.getName());","""java.sql.String"");","String.valueOf(start));"
"256","307.txt","public void forceCleanup()","public void doGC()","public void forceCompaction()"
"257","3074.txt","docBase = context.docBase;","this.docBase = context.docBase;","this.docBase = context.docBase;"
"258","3078.txt","if (resultColumn.isGenerated() || resultColumn.isGeneratedForUnmatchedColumnInInsert())","if (resultColumn.isGenerated())","if (resultColumn.isGenerated() || otherResultColumn.isGenerated())"
"259","3080.txt","throw StandardException.newException(SQLState.LANG_RESULT_SET_NOT_OPEN, ""previous"");","throw StandardException.newException(SQLState.LANG_RESULT_SET_NOT_OPEN, ""next"");","throw StandardException.newException(SQLState.LANG_RESULT_SET_NOT_OPEN, ""first"");"
"260","3085.txt","for (FieldInfo fi : this) {","for (FieldInfo fi : fieldInfos) {","for (FieldInfo fieldInfo : this) {"
"261","3086.txt","theResults.close();","theResults.finish(); // release the result set, don't just close it","if (theResults.isClosed())"
"262","309.txt","protected String pathPrefix = null; // strip this from the beginning of a path","protected String pathPrefix = null; // strip this from the begging of a path","protected String abortErrorMessage = null;"
"263","3090.txt","""(Binary data value not displayed)"",","""XX-RESOLVE-XX"",","not set as a stream then this value should be ignored."
"264","3093.txt","if (endNumOpens-zkClientNumOpens != endNumCloses-zkClientNumCloses) {","if (endNumOpens-numOpens != endNumCloses-numCloses) {","if (endNumOpens-numOpens != endNumCloses-numCloses) {"
"265","3094.txt","javaPath = ""org.apache.derbyTesting.functionTests.tests."" + testDirName;","javaPath = ""org.apache.derbyTesting."" + testDirName;","//javaPath = ""org.apache.derbyTesting.functionTests.harness.MultiTest"";"
"266","3099.txt","return false;","throw new IllegalStateException(""No configured RPC daemon"");","return true;"
"267","3112.txt","Gossiper.instance.addLocalApplicationState(ApplicationState.STATUS, valueFactory.bootstrapping(token));","Gossiper.instance.addLocalApplicationState(ApplicationState.STATUS, valueFactory.normal(token));","Gossiper.instance.addLocalApplicationState(ApplicationState.STATUS, valueFactory.normal(token));"
"268","314.txt","for (int i = 0; i < 100*_TestUtil.getRandomMultiplier(); i++) {","for (int i = 0; i < 10; i++) {","for (int i = 1; i < numFields; i++) {"
"269","3143.txt","private void refill() {","private void refill() throws IOException {","private void flushBigram() {"
"270","315.txt","void incRef(Collection<String> files) throws IOException {","void incRef(List<String> files) throws IOException {","void decRef(Collection<String> files) throws IOException {"
"271","3165.txt","public boolean incrementToken() {","public boolean incrementToken() throws IOException {","public boolean incrementToken() throws IOException {"
"272","3168.txt","public void close() {}","public void close() throws IOException {}","public void setDoFail() {"
"273","317.txt","if (op != SpatialOperation.Intersects)","if (! SpatialOperation.is(op, SpatialOperation.IsWithin, SpatialOperation.Intersects, SpatialOperation.BBoxWithin, SpatialOperation.BBoxIntersects))","final SpatialOperation op = args.getOperation();"
"274","3172.txt","String segmentSuffix) {","String segmentSuffix) throws IOException {","String segmentSuffix) throws IOException {"
"275","3182.txt","public final int freq() {","public final int freq() throws IOException {","public final int docID() {"
"276","3183.txt","public float score() {","public float score() throws IOException {","public float freq() {"
"277","3193.txt","public void work(double units) {","public void work(double units) throws MergePolicy.MergeAbortedException {","public void work(double units) throws MergePolicy.MergeAbortedException {"
"278","3203.txt","void finish() {","void finish() throws IOException {","void shrinkHash() {"
"279","3207.txt","private void pushTop() {","private void pushTop() throws IOException {","private void pullTop() {"
"280","321.txt","IndexWriter writer = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setReaderTermsIndexDivisor(2));","IndexWriter writer = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));","IndexWriter writer = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));"
"281","3237.txt","ModifiableSolrParams params) {","ModifiableSolrParams params) throws IOException {","ModifiableSolrParams params) throws IOException {"
"282","3246.txt","{""ID"", ""2"", ""INTEGER NOT NULL"", ""GENERATED_BY_DEFAULT"", ""3"", ""1"", ""1"", ""D3175"", ""T"", ""R""}","{""ID"", ""2"", ""INTEGER NOT NULL"", ""GENERATED_BY_DEFAULT"", ""22"", ""1"", ""1"", ""D3175"", ""T"", ""R""}","{""ID"", ""3"", ""INTEGER NOT NULL"", ""GENERATED_BY_DEFAULT"", ""1"", ""1"", ""1"", ""D3175"", ""T"", ""R""}"
"283","3254.txt","agentContext.unregisterMBean(AbstractCompendiumHandler.this);","agentContext.unregisterMBean(getName());","agentContext.registerMBean(AbstractCompendiumHandler.this);"
"284","3283.txt","System.out.println(Thread.currentThread().getName() + "": EXC: "");","System.out.println(""EXC: "");","System.out.println(Thread.currentThread().getName() + "": NOW FAIL: "" + name);"
"285","3308.txt","throw new IllegalArgumentException(""faulty slice operation: bra="" + bra + "",ket="" + ket + "",limit="" + limit);","System.err.println(""faulty slice operation"");","modification, are permitted provided that the following conditions are met:"
"286","3309.txt","RandomIndexWriter iw = new RandomIndexWriter(random(), dir, cfg);","RandomIndexWriter iw = new RandomIndexWriter(random(), dir);","RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);"
"287","3319.txt","if (!se.isLockTimeout())","if (!se.getMessageId().equals(SQLState.LOCK_TIMEOUT))","if (savePoints.size() > 20)"
"288","3321.txt","else if (se.isLockTimeout())","else if (SQLState.LOCK_TIMEOUT.equals(se.getMessageId()))","else"
"289","3329.txt","Thread.sleep(INTERRUPT_RETRY_SLEEP);","Thread.sleep(500); // 0.5s","else"
"290","3398.txt","termState.skipFP = 0;","termState.skipFP = termState.bytesReader.readVLong();","termState.skipFP = termState.bytesReader.readVLong();"
"291","3399.txt","termState.skipFP = 0;","termState.skipFP = termState.bytesReader.readVLong();","termState.skipFP = termState.bytesReader.readVLong();"
"292","3406.txt","if (trackedId != null) {","if (getTrackingCount() > 0) {","if (trackedId != null && !trackedId.equals(serviceID)) {"
"293","3415.txt","int iters = 1000; // don't let it go too big, or jenkins will stack overflow: atLeast(1000);","int iters = atLeast(1000);","Field noLongTermField = new Field(""no_long_term"", ""This is a test where foo is highlighed and should be highlighted"", type);"
"294","3416.txt","case Types.JAVA_OBJECT:","case org.apache.derby.iapi.reference.JDBC20Translation.SQL_TYPES_JAVA_OBJECT:","case Types.CLOB:"
"295","3417.txt","case Types.BOOLEAN:","case org.apache.derby.iapi.reference.JDBC30Translation.SQL_TYPES_BOOLEAN:","case Types.DOUBLE:"
"296","3418.txt","case Types.JAVA_OBJECT:","case org.apache.derby.iapi.reference.JDBC20Translation.SQL_TYPES_JAVA_OBJECT:","case Types.OTHER:"
"297","3419.txt","if (colType == Types.JAVA_OBJECT) {","if (colType == org.apache.derby.iapi.reference.JDBC20Translation.SQL_TYPES_JAVA_OBJECT) {","if (colType != Types.CLOB) {"
"298","3420.txt","case Types.BOOLEAN:","case org.apache.derby.iapi.reference.JDBC30Translation.SQL_TYPES_BOOLEAN:","case Types.DOUBLE:"
"299","3426.txt","if (sum.equals(""""))","if (sum.startsWith(tit) || sum.equals(""""))","if (inImg && t1.image.equalsIgnoreCase(""alt"") && t2 != null)"
"300","3435.txt","byte[] partitionedCounter = ByteBufferUtil.getArray(pc);","byte[] partitionedCounter = Arrays.copyOfRange(pc.array(), pc.position() + pc.arrayOffset(), pc.limit());","ByteBuffer pc = FBUtilities.readShortByteArray(dis);"
"301","3449.txt","w.shutdown();","w.close();","super.tearDown();"
"302","345.txt","assertEquals(4, cms.getMaxThreadCount());","assertEquals(10, cms.getMaxThreadCount());","assertEquals(2, cms.getMaxThreadCount());"
"303","3451.txt","w.shutdown();","w.close();","super.tearDown();"
"304","3454.txt","w.shutdown();","w.close();","super.tearDown();"
"305","3457.txt","w.shutdown();","w.close();","super.tearDown();"
"306","3523.txt","w.shutdown();","w.close();","t.join();"
"307","3534.txt","w.shutdown();","w.close();","thread.join();"
"308","3540.txt","w.shutdown();","w.close();","thread.join();"
"309","3555.txt","iw.shutdown();","iw.close();","t.join();"
"310","3558.txt","iw.shutdown();","iw.close();","t.join();"
"311","3565.txt","w.shutdown();","w.close();","w.addDocument(d);"
"312","3574.txt","w.shutdown();","w.close();","t.join();"
"313","359.txt","public int size() {","public int size() throws IOException {","public int numDocs() {"
"314","3609.txt","w.shutdown();","w.close();","super.tearDown();"
"315","3611.txt","w.shutdown();","IOUtils.close(w);","bits.or(it);"
"316","3639.txt","iw.shutdown();","IOUtils.close(iw);","iwRef.decref();"
"317","364.txt","logger_.error(""Gossip error"", e);","throw new RuntimeException(e);","logger_.trace(""Gossip Digests are : "" + sb.toString());"
"318","3640.txt","writer.shutdown();","writer.close();","writer.flush();"
"319","3649.txt","store.unregisterMBean();","store.invalidate(); // unregistering old MBean to test how key cache will be loaded","store.invalidateKeyCache();"
"320","3650.txt","public synchronized void response(Message message)","public void response(Message message)","public synchronized void response(Message msg)"
"321","3659.txt","bf = BloomFilter.getFilter(keyCount, 15);","bf = new BloomFilter((int)keyCount, 15); // TODO fix long -> int cast","BloomFilter.serializer().serialize(bf, stream);"
"322","3664.txt","CFMetaData metadata = ThriftValidation.validateColumnFamily(keyspace, column_parent.column_family);","CFMetaData metadata = ThriftValidation.validateColumnFamily(keyspace, column_parent.column_family, false);","CFMetaData metadata = ThriftValidation.validateColumnFamily(keyspace, column_parent.column_family, true);"
"323","3667.txt","return 1;","return -1;","return -1;"
"324","3673.txt","(wd.getArgClasses() == null || Arrays.equals(new String [] {Class.class.getName()}, wd.getArgClasses()))) {","Arrays.equals(new String [] {Class.class.getName()}, wd.getArgClasses())) {","(wd.getArgClasses() != null ? Arrays.equals(argClassNames, wd.getArgClasses()) : true)) {"
"325","3676.txt","if (!packed) {","if (true || !packed) {","if (packed) {"
"326","3677.txt","res = ResourceBundle.getBundle(messageFileName);","res = ResourceBundle.getBundle(MESSAGE_FILE);","res = ResourceBundle.getBundle(messageFileName,locale);"
"327","3708.txt","{""08004"",""User '{0}' cannot upgrade database '{1}'. Only the database owner can perform this operation."",""40000""},","{""08004"",""User '{0}' cannot hard upgrade database '{1}'. Only the database owner can perform this operation."",""40000""},","{""08004"",""User '{0}' cannot decrypt database '{1}'. Only the database owner can perform this operation."",""40000""},"
"328","3709.txt","if (jvmflags != null && jvmflags.length() > 0)","if (jvmflags != null)","if ((jvmflags != null) && (jvmflags.length() > 0))"
"329","3721.txt","assertTrue(r1.isCurrent());","assertFalse(r1.isCurrent());","assertTrue(r2.isCurrent());"
"330","3723.txt","builder.append(column.getString(this)).append("","");","builder.append(getString(column.name())).append("","");","builder.append(getString(name)).append("","");"
"331","3726.txt","return Long.MIN_VALUE;","throw new UnsupportedOperationException();","return row.dataSize;"
"332","3735.txt","return ""0.3.0"";","return ""1"";","return 0;"
"333","3737.txt","if (Float.isInfinite((float)value))","if (Math.abs(value) > Float.MAX_VALUE)","if (!(theValue instanceof java.lang.Double))"
"334","3738.txt","Float.isInfinite((float)source)) {","(source > Float.MAX_VALUE || source < -Float.MAX_VALUE)) {","return new Float((float) source);"
"335","3743.txt","@Test","@Test @Ignore(""https://issues.apache.org/jira/browse/SOLR-5343"")","// Test:"
"336","3757.txt","new StatementFinder(langUtil.getNewEncodedInput(new BufferedInputStream(is, BUFFEREDFILESIZE), ""UTF8""));","new StatementFinder(langUtil.getNewInput(new BufferedInputStream(is, BUFFEREDFILESIZE)));","new StatementFinder(langUtil.getNewInput(new BufferedInputStream(newFile, BUFFEREDFILESIZE)));"
"337","3762.txt","}).start();","});","}"
"338","3767.txt","ignoreErrors = true;","ignoreErrors = Boolean.parseBoolean(cmd.getOptionValue(""k""));","return ignoreErrors;"
"339","3771.txt","if (value > 0) value *= -1;","value *= -1;","if (columns != null)"
"340","38.txt","checkHits(q(queryCenter, radiusDeg*3 + smallRadius/2), points.size(), null);","checkHits(q(queryCenter, radiusDeg*3*1.01), points.size(), null);","checkHits(q(queryCenter, radiusDeg - smallRadius/2), 0, null);"
"341","380.txt","tracker.timeUpperBound = 100000;","tracker.timeUpperBound = -1;","tracker.timeUpperBound = 500;"
"342","3807.txt","return entity == null ? null : getVariableResolver().replaceTokens(entity.allAttributes.get(name));","return super.getResolvedEntityAttribute(name);","return getVariableResolver().replaceTokens(template);"
"343","3815.txt","import org.apache.lucene.index.values.Type;","import org.apache.lucene.index.values.Values;","import org.apache.lucene.index.values.Bytes;"
"344","3818.txt","//  @Test","@Test","m = ModelSerializer.gson().fromJson(new StringReader(data), Mapping.class);"
"345","3819.txt","new String[][] {{""1"",null}});","null);","new String[][] {{""1""} });"
"346","3820.txt","return ""http://"" + hostAndPort + ""/"" + path;","return ""http://"" + hostAndPort + (path.isEmpty() ? """" : (""/"" + path));","return;"
"347","3826.txt","// FIXME: on windows, this often fails! assertEquals(0, dir.listAll().length);","assertEquals(0, dir.listAll().length);","throw new IOException(""now fail during delete"");"
"348","3828.txt","+info+"". Triggers got fired in this order:""+TRIGGER_INFO.get().toString(), orderOk);","+info, orderOk);","int fireCount = assertFiringOrder(""INSERT"", 1);"
"349","3874.txt","positionsIncrements[i] = _TestUtil.nextInt(random(), 1, 1 << 18);","positionsIncrements[i] = random().nextInt(1 << 18);","positionsIncrements[i] = _TestUtil.nextInt(random(), 1, 1 << 5);"
"350","3875.txt","throw new RuntimeException(""Error in multi-threaded import"", e);","LOG.error(""error in import"", e);","throw new DataImportHandlerException(DataImportHandlerException.SEVERE, t);"
"351","3895.txt","File dirFile = _TestUtil.getTempDir(""deletetest"");","File dirFile = new File(TEMP_DIR, ""deletetest"");","File dirFile = _TestUtil.getTempDir(""TestIndexReader.testFilesOpenClose"");"
"352","3901.txt","String remoteHost = remoteAddress.getAddress().getHostAddress();","String remoteHost = remoteAddress.getHostName();","String remoteHostIp = remoteAddress.getAddress().getHostAddress();"
"353","3921.txt","current = start;","current = newText.getIndex();","current = end;"
"354","3935.txt","transactions.add(Arrays.asList(""D"", ""D"", """", ""D"", ""D""));","transactions.add(Arrays.asList(""D""));","transactions.add(Arrays.asList(""D"", ""A"", ""C"", ""E"", ""B""));"
"355","3936.txt","transactions.add(Arrays.asList(""D"", ""D"", """", ""D"", ""D""));","transactions.add(Arrays.asList(""D""));","transactions.add(Arrays.asList(""D"", ""A"", ""C"", ""E"", ""B""));"
"356","3940.txt","resultSet.getResultColumns().forbidOverrides(null);","resultSet.getResultColumns().checkAutoincrement(null);","resultSet.getResultColumns().markUpdated();"
"357","3941.txt","resultColumnList.forbidOverrides(resultSet.getResultColumns());","resultColumnList.checkAutoincrement(resultSet.getResultColumns());","resultColumnList.checkStorableExpressions(resultSet.getResultColumns());"
"358","3944.txt","throw new CardinalityException(size(), x.size());","throw new CardinalityException();","throw new CardinalityException();"
"359","3945.txt","SSTableMetadata.createCollector());","ReplayPosition.NONE);","StorageService.getPartitioner(),"
"360","3946.txt","NamedList<Object> commands = new SimpleOrderedMap<Object>();","NamedList<Object> commands = new NamedList<Object>();","NamedList<Object> command = new SimpleOrderedMap<Object>();"
"361","3953.txt","abort();","IOUtils.closeWhileHandlingException(tvx, tvd, tvf);","close();"
"362","3954.txt","_optional = (""optional"".equals(attributes.get(""availability:"")));","_optional = false;","_optional = optional;"
"363","3956.txt","CFMetaData.applyImplicitDefaults(cf_def);","oldCfm.apply(cf_def);","CFMetaData.validateMemtableSettings(cf_def);"
"364","3960.txt","// Not in Java 5: @Override","@Override","/** blast some random strings through the analyzer */"
"365","3966.txt","if (builder.length() > 0 && builder.length() < maxLength) {","if (builder.length() > 0) {","if (builder.length() + value.length() > maxLength) {"
"366","397.txt","ModifiableSolrParams params) {","ModifiableSolrParams params) throws IOException {","ModifiableSolrParams params) throws IOException {"
"367","3973.txt","new StatementFinder(langUtil.getNewEncodedInput(new BufferedInputStream(is, BUFFEREDFILESIZE), ""UTF8""));","new StatementFinder(langUtil.getNewInput(new BufferedInputStream(is, BUFFEREDFILESIZE)));","new StatementFinder(langUtil.getNewInput(new BufferedInputStream(newFile, BUFFEREDFILESIZE)));"
"368","3994.txt","Thread.getDefaultUncaughtExceptionHandler().uncaughtException(Thread.currentThread(), e);","logger.error(""Error in executor futuretask"", e);","this.setRejectedExecutionHandler(new ThreadPoolExecutor.CallerRunsPolicy());"
"369","4020.txt","@exception StandardException Standard Derby Error Policy","@exception StandardException Cloudscape Standard Error Policy","@exception StandardException on error"
"370","4025.txt","{ // pattern is not necessarily a Derby Blob","{ // pattern is not necessarily a cloudscape Blob","{"
"371","4034.txt","{""XSLA4"",""Error encountered when attempting to write the transaction recovery log. Most likely the disk holding the recovery log is full. If the disk is full, the only way to proceed is to free up space on the disk by either expanding it or deleting files not related to Derby. It is also possible that the file system and/or disk where the Derby transaction log resides is read-only. The error can also be encountered if the disk or file system has failed."",""45000""},","{""XSLA4"",""Cannot write to the log, most likely the log is full.  Please delete unnecessary files.  It is also possible that the file system is read only, or the disk has failed, or some other problems with the media.  "",""45000""},","{""08004"",""Connection authentication failure occurred. Either the supplied credentials were invalid, or the database uses a password encryption scheme not compatible with the strong password substitution security mechanism. If this error started after upgrade, refer to the release note for DERBY-4483 for options."",""40000""},"
"372","4035.txt","assertFalse(r1.isCurrent());","assertTrue(r1.isCurrent());","assertFalse(r2.isCurrent());"
"373","4037.txt","logger.info(""Loading settings from "" + configFileName);","logger.debug(""Loading settings from "" + configFileName);","logger.info(""Loading schema version "" + uuid.toString());"
"374","4053.txt","optimizer.prepForNextRound();","((OptimizerImpl)optimizer).prepForNextRound();","optimizer.costPermutation();"
"375","4055.txt","ColumnFamilyStore.submitFlush(Memtable.this, cLogCtx);","MemtableManager.instance().submit(cfName_, Memtable.this, cLogCtx);","columnFamilies_.put(key, columnFamily);"
"376","4059.txt","agentContext.unregisterMBean(AbstractCompendiumHandler.this);","agentContext.unregisterMBean(getName());","agentContext.registerMBean(AbstractCompendiumHandler.this);"
"377","4068.txt","if (resultColumn.isGenerated() || resultColumn.isGeneratedForUnmatchedColumnInInsert())","if (resultColumn.isGenerated())","if (resultColumn.isGenerated() || otherResultColumn.isGenerated())"
"378","4071.txt","public StoredDocument doc(int docID, Set<String> fieldsToLoad) throws IOException {","public final StoredDocument document(int docID, Set<String> fieldsToLoad) throws IOException {","public StoredDocument doc(int docID) throws IOException {"
"379","4078.txt","0);","false);","tiq.pop(); // remove lowest in tiq"
"380","4085.txt","0),","false),","drillDownTerm.field(), drillDownTerm.bytes(),"
"381","4089.txt","0);","false);","for (int i = 0; i < map1.maxDoc(); ++i) {"
"382","4096.txt","0);","false);","});"
"383","4098.txt","0);","false);","for(int i=0;i<NUM_THREADS;i++)"
"384","4109.txt","@Test @Deprecated","@Test","@Test"
"385","4111.txt","columnName,","null,","columnName);"
"386","4114.txt","throw StandardException.newException(SQLState.LANG_INVALID_COL_REF_GROUPED_SELECT_LIST, cr.getSQLColumnName());","throw StandardException.newException(SQLState.LANG_INVALID_GROUPED_SELECT_LIST);","throw StandardException.newException(SQLState.LANG_INVALID_COL_REF_NON_GROUPED_SELECT_LIST, cr.getSQLColumnName());"
"387","4120.txt","String seg = IndexFileNames.parseSegmentName(fileName);","String seg = fileName.substring(0, fileName.indexOf('.'));","final String id = IndexFileNames.stripSegmentName(name);"
"388","4123.txt","p.put(Attribute.DRDA_SECMEC,","p.put(Attribute.CLIENT_SECURITY_MECHANISM,","p.put(Attribute.DRDA_SECTKN_IN,"
"389","4126.txt","columnName,","null,","columnName +"
"390","4135.txt","setToken(token);","tokenMetadata_.updateNormalToken(token, FBUtilities.getLocalAddress());","setToken(getLocalToken());"
"391","4153.txt","public static final String VER = ""ver"";","private static final String VER = ""ver"";","public static final String OVERWRITE = ""ow"";"
"392","4174.txt","return termsIndex.getValueCount();","return termsIndex.numOrd();","return termsIndex.getOrd(doc);"
"393","4201.txt","public static Test attributesDatabase(","private static Test attributesDatabase(","public static Test encryptedDatabaseBpw(Test test,"
"394","4205.txt","this.localeFinder = other.localeFinder;","this.localeFinder = localeFinder;","this.localeFinder = localeFinder;"
"395","4208.txt","if (!clauses.isEmpty() && !field.equals(that.field)) return false;","if (!field.equals(that.field)) return false;","if (!clauses.equals(that.clauses)) return false;"
"396","4228.txt","break;","throw new RuntimeException(e);","return;"
"397","4235.txt","assertEquals(""[2,2]"", ""[0.429, 0.429, 0.143]"", AbstractCluster.formatVector(pdf, null));","assertEquals(""[2,2]"", ""[0.545, 0.273, 0.182]"", AbstractCluster.formatVector(pdf, null));","assertEquals(""[2,2]"", ""[0.493, 0.296, 0.211]"", AbstractCluster.formatVector(pdf, null));"
"398","4237.txt","handle.put(""explain"", SKIPVAL);","handle.put(""explain"", UNORDERED);","handle.put(""time"", SKIPVAL);"
"399","4238.txt","handle.put(""explain"", SKIPVAL);","handle.put(""explain"", UNORDERED);","handle.put(""time"", SKIPVAL);"
"400","424.txt","private void refill() {","private void refill() throws IOException {","private void flushBigram() {"
"401","4245.txt","if (provider == null) context.ungetService(ref); // we didn't get something back, so this was no good.","context.ungetService(ref); // we didn't get something back, so this was no good.","if (provider == null) context.ungetService(ref);"
"402","4290.txt","assertEquals(-1, tps.nextPosition());","assertEquals(0, tps.nextPosition());","assertEquals(3, tps.nextPosition());"
"403","4291.txt","void directShutdownInternal() {","private void directShutdownInternal() {","directShutdownInternal();"
"404","4294.txt","if (term==null || term.field() != field || t >= mterms.length) break;","if (term==null || term.field() != field) break;","if (term==null || term.field() != field) break;"
"405","4305.txt","sqle = e;","sqle = null;","sqle = null;"
"406","4306.txt","public synchronized void response(Message msg)","public void response(Message msg)","public void response(Message message)"
"407","4308.txt","if (trackedId != null) {","if (getTrackingCount() > 0) {","if (trackedId != null && !trackedId.equals(serviceID)) {"
"408","4312.txt","JDBC.assertUnorderedResultSet(rs, expRS, true);","JDBC.assertFullResultSet(rs, expRS, true);","JDBC.assertFullResultSet(rs, expRS, true);"
"409","4344.txt","bits.and(chain[i].bits(reader));","bits.and(((DocIdBitSet)chain[i].getDocIdSet(reader)).getBitSet());","bits.and(((ISerialChainFilter) chain[i]).bits(reader, bits));"
"410","4352.txt","return false;","return true;","return true;"
"411","4370.txt","File dirFile = _TestUtil.getTempDir(""deletetest"");","File dirFile = new File(TEMP_DIR, ""deletetest"");","File dirFile = _TestUtil.getTempDir(""TestIndexReader.testFilesOpenClose"");"
"412","4387.txt","return openInput(name, BufferedIndexInput.BUFFER_SIZE);","return new FSIndexInput(new File(directory, name));","this(path, BufferedIndexInput.BUFFER_SIZE);"
"413","442.txt","public void close() {}","public void close() throws IOException {}","public void setDoFail() {"
"414","443.txt","public boolean incrementToken() {","public boolean incrementToken() throws IOException {","public boolean incrementToken() throws IOException {"
"415","456.txt","String segmentSuffix) {","String segmentSuffix) throws IOException {","String segmentSuffix) throws IOException {"
"416","468.txt","public final int freq() {","public final int freq() throws IOException {","public final int docID() {"
"417","469.txt","public float score() {","public float score() throws IOException {","public float freq() {"
"418","480.txt","void finish() {","void finish() throws IOException {","void shrinkHash() {"
"419","486.txt","private void pushTop() {","private void pushTop() throws IOException {","private void pullTop() {"
"420","488.txt","public void work(double units) {","public void work(double units) throws MergePolicy.MergeAbortedException {","public void work(double units) throws MergePolicy.MergeAbortedException {"
"421","49.txt","public abstract NumericDocValues getNormValues(String field) throws IOException;","public abstract NumericDocValues simpleNormValues(String field) throws IOException;","public abstract NumericDocValues getNumericDocValues(String field) throws IOException;"
"422","498.txt","{""XSLA4"",""Error encountered when attempting to write the transaction recovery log. Most likely the disk holding the recovery log is full. If the disk is full, the only way to proceed is to free up space on the disk by either expanding it or deleting files not related to Derby. It is also possible that the file system and/or disk where the Derby transaction log resides is read-only. The error can also be encountered if the disk or file system has failed."",""45000""},","{""XSLA4"",""Cannot write to the log, most likely the log is full.  Please delete unnecessary files.  It is also possible that the file system is read only, or the disk has failed, or some other problems with the media.  "",""45000""},","{""08004"",""Connection authentication failure occurred. Either the supplied credentials were invalid, or the database uses a password encryption scheme not compatible with the strong password substitution security mechanism. If this error started after upgrade, refer to the release note for DERBY-4483 for options."",""40000""},"
"423","5.txt","RandomIndexWriter iw = new RandomIndexWriter(random(), dir, cfg);","RandomIndexWriter iw = new RandomIndexWriter(random(), dir);","RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);"
"424","50.txt","public NumericDocValues getNormValues(String field) {","public NumericDocValues simpleNormValues(String field) {","public NumericDocValues getNumericDocValues(String field) {"
"425","503.txt","r = new FCInvisibleMultiReader((DirectoryReader)r);","r = new FCInvisibleMultiReader(new AssertingDirectoryReader((DirectoryReader)r));","r = new FCInvisibleMultiReader(r);"
"426","506.txt","public FieldComparator setNextReader(IndexReader reader, int docBase)","public void setNextReader(IndexReader reader, int docBase)","public void setNextReader(IndexReader reader, int docBase)"
"427","51.txt","public NumericDocValues getNormValues(String field) {","public NumericDocValues simpleNormValues(String field) {","public NumericDocValues getNumericDocValues(String field) {"
"428","512.txt","clearEndpointCache();","invalidateCachedSnitchValues();","reloadConfiguration();"
"429","513.txt","if (rowToFetch != 0) {","if (rowToFetch != 0 || cursorUnpositionedOnServer_) {","if (row > 0) {"
"430","52.txt","assertEquals( ""subInfos=(d((9,10)))/1.0(3,103)"", ffl.fragInfos.get( 0 ).toString() );","assertEquals( ""subInfos=(d((6,7)))/1.0(0,100)"", ffl.fragInfos.get( 0 ).toString() );","assertEquals( ""subInfos=(b((2,3)))/1.0(0,20)"", ffl.fragInfos.get( 0 ).toString() );"
"431","529.txt","ref.copyChars(charArray, offset, length);","ref.copy(charArray, offset, length);","ref.append(charArray, offset, length);"
"432","54.txt","assertEquals( ""d(1.0)((9,10))"", fpl.phraseList.get( 0 ).toString() );","assertEquals( ""d(1.0)((6,7))"", fpl.phraseList.get( 0 ).toString() );","assertEquals( ""a(1.0)((0,1))"", fpl.phraseList.get( 0 ).toString() );"
"433","564.txt","logMsg(LINE);","istream.println(LINE);","logMsg(jvmVersion);"
"434","566.txt","assertTrue(files[0].endsWith(""write.lock""));","assertEquals(""write.lock"", files[0]);","assertTrue(files.contains(""_0.cfs""));"
"435","573.txt","public static String simpleTag(String tag, String... args) {","private static String simpleTag(String tag, String... args) {","public static String deleteById(String id, String... args) {"
"436","579.txt","p.put(Attribute.DRDA_SECMEC,","p.put(Attribute.CLIENT_SECURITY_MECHANISM,","p.put(Attribute.DRDA_SECTKN_IN,"
"437","585.txt","Query query1 = new WildcardQuery(new Term(""body"", ""m?tal""));       // 1","Query query1 = new TermQuery(new Term(""body"", ""m?tal""));       // 1","Query query4 = new WildcardQuery(new Term(""body"", ""m?t?ls""));  // 3"
"438","591.txt","void directShutdownInternal() {","private void directShutdownInternal() {","directShutdownInternal();"
"439","595.txt","+info+"". Triggers got fired in this order:""+TRIGGER_INFO.get().toString(), orderOk);","+info, orderOk);","int fireCount = assertFiringOrder(""INSERT"", 1);"
"440","599.txt","outlen[0] = appRequester.getTimestampLength();","outlen[0] = 26;","outlen[0] = 2;"
"441","6.txt","String seg = IndexFileNames.parseSegmentName(fileName);","String seg = fileName.substring(0, fileName.indexOf('.'));","final String id = IndexFileNames.stripSegmentName(name);"
"442","605.txt","JDBC.assertUnorderedResultSet(rs, expRS, true);","JDBC.assertFullResultSet(rs, expRS, true);","JDBC.assertFullResultSet(rs, expRS, true);"
"443","614.txt","if (keepCurrentDefault)","if (defaultNode == null)","if (isAutoincrement == false)"
"444","624.txt","return ByteBufferUtil.bytes(source, Charsets.US_ASCII);","return ByteBuffer.wrap(source.getBytes(Charsets.US_ASCII));","return ByteBufferUtil.string(bytes, Charsets.US_ASCII);"
"445","632.txt","public final IFilter filter;","private final IFilter filter;","public final QueryPath path;"
"446","637.txt","conf.setMapOutputValueClass(Text.class);","conf.setMapOutputValueClass(VectorWritable.class);","conf.setMapOutputValueClass(KMeansInfo.class);"
"447","65.txt","al.add( BaseTestCase.getJavaExecutableName() );","al.add( ""java"" );","argsList.add( config.getHostName() );"
"448","66.txt","skipRemainder(true);","skipRemainder(false);","skipRemainder(false);"
"449","662.txt","r = new FCInvisibleMultiReader((DirectoryReader)r);","r = new FCInvisibleMultiReader(new AssertingDirectoryReader((DirectoryReader)r));","r = new FCInvisibleMultiReader(r);"
"450","666.txt","return Types.DOUBLE;","return Types.INTEGER;","return Types.BLOB;"
"451","67.txt","public static String getNameFromJdbcType(int jdbcType) {","public static String jdbcNameFromJdbc(int jdbcType) {","public static String sqlNameFromJdbc(int jdbcType) {"
"452","69.txt","""select a, length(a), b from testClobTriggerB order by b"");","""select a, length(a), b from testClobTriggerA order by b"");","""select a, length(a), b from testClobTriggerA order by b"");"
"453","719.txt","if (def.finished())","if (def.needsInput())","if (def.needsInput())"
"454","727.txt","res = ResourceBundle.getBundle(messageFileName);","res = ResourceBundle.getBundle(MESSAGE_FILE);","res = ResourceBundle.getBundle(messageFileName,locale);"
"455","731.txt","return true;","target = currentDoc + 1;","return false;"
"456","752.txt","setInput(parameterIndex, Boolean.valueOf(x));","setInput(parameterIndex, new Short((short) (x ? 1 : 0)));","setInput(parameterIndex, null);"
"457","753.txt","writeBoolean(((Boolean) inputs[i]).booleanValue());","write1Byte(((Short) inputs[i]).shortValue());","writeDouble(((Double) inputs[i]).doubleValue());"
"458","755.txt","if (start >= current.endOffset || end > contentLength) {","if (start >= current.endOffset) {","if (start >= current.endOffset) {"
"459","762.txt","Range<RowPosition> range = Util.range("""", """");","Range range = new Range(p.getMinimumToken(), p.getMinimumToken());","RowMutation rm = new RowMutation(""Keyspace1"", key);"
"460","768.txt","if (keys != null && index != keys.length) {","if (index != keys.length) {","if (keys != null) {"
"461","770.txt","return java.math.BigDecimal.valueOf(getLong(column));","return new java.math.BigDecimal( getInt( column ) );","return java.math.BigDecimal.valueOf(get_SMALLINT(column));"
"462","78.txt","refreshLock.unlock();","refreshLock.lock();","refreshLock.lock();"
"463","786.txt","public void doPendingWrites()","void doPendingWrites()","public void run()"
"464","793.txt","if( docsUpperBound > 0 && docsSinceCommit > docsUpperBound ) {","if( docsSinceCommit > docsUpperBound ) {","else if( docsUpperBound > 0 && (docsSinceCommit > docsUpperBound) ) {"
"465","807.txt","String OBJECT_CLOSED                                    = ""J104"";","String CONN_ALREADY_CLOSED                              = ""J104"";","String UNKNOWN_HOST_ID                                  = ""J109"";"
"466","818.txt","CFMetaData.applyImplicitDefaults(cf_def);","oldCfm.apply(cf_def);","CFMetaData.validateMemtableSettings(cf_def);"
"467","822.txt","JDBC.assertSingleValueResultSet(ps.executeQuery(), null);","JDBC.assertSingleValueResultSet(ps.executeQuery(), ""11:00:00"");","JDBC.assertSingleValueResultSet(ps.executeQuery(), ""42"");"
"468","829.txt","String type = (entry.getType() == null) ? getType(name) : entry.getType();","String type = getType(name);","String type = null;"
"469","830.txt","@Test @Ignore(""Please fix me!"")","@Test","@Test"
"470","831.txt","bufIn.readUTF();","String key = bufIn.readUTF();","bufIn.readInt();"
"471","861.txt","this.localeFinder = other.localeFinder;","this.localeFinder = localeFinder;","this.localeFinder = localeFinder;"
"472","864.txt","return key.compareTo(kp.key);","return partitioner.getDecoratedKeyComparator().compare(key, kp.key);","return parseTableName(path);"
"473","865.txt","return key.compareTo(o.key);","return partitioner.getDecoratedKeyComparator().compare(key, o.key);","return key;"
"474","870.txt","SQLState.LOG_FULL, ioe);","SQLState.LOG_FULL, ioe, null );","SQLState.LOG_FULL, ioe));"
"475","874.txt","cds = null;","cds = td.getConglomerateDescriptors();","td = null;"
"476","876.txt","System.out.println(""-"" + COLLECTION + "" and -"" + CONFNAME","System.out.println(""-"" + CONFDIR + "" and -"" + CONFNAME","System.out.println(""-"" + CONFDIR + "" and -"" + CONFNAME"
"477","894.txt","ALLOW_SSL = false;","sslConfig = null;","return false;"
"478","895.txt","ALLOW_SSL = false;","sslConfig = null;","return false;"
"479","900.txt","true,				// nullability","false,// nullability","false,// nullability"
"480","904.txt","if (dlist == null || dlist.size() < limit) continue;","if (dlist == null || dlist.size() < limit) return false;","if (alist == null || alist.size() < limit) continue;"
"481","909.txt","exclusions = exclusiontable.keySet();","exclusions = new HashSet(exclusiontable.keySet());","exclusions = exclusiontable;"
"482","910.txt","theResults.close();","theResults.finish(); // release the result set, don't just close it","if (theResults.isClosed())"
"483","936.txt","} catch (Exception e) {","} catch (Throwable e) {","} catch (ClassNotFoundException e) {"
"484","937.txt","} catch (Exception t) {","} catch (Throwable t) {","} catch (Exception e) {"
"485","938.txt","} catch (Exception e) {","} catch (Throwable e) {","} catch (InterruptedException e) {"
"486","939.txt","} catch (Exception e) {","} catch (Throwable e) {","} catch (RuntimeException e) {"
"487","940.txt","} catch (Exception e) {","} catch (Throwable e) {","} catch (IOException e) {"
"488","941.txt","catch( Exception ex ) {","catch( Throwable ex ) {","catch (Exception e) {"
"489","942.txt","} catch (Exception th) {","} catch (Throwable th) {","} catch (ExecutionException e) {"
"490","947.txt","} catch (Exception t) {","} catch (Throwable t) {","} catch (Exception e) {"
"491","959.txt","CFMetaData metadata = ThriftValidation.validateColumnFamily(keyspace, column_parent.column_family);","CFMetaData metadata = ThriftValidation.validateColumnFamily(keyspace, column_parent.column_family, false);","CFMetaData metadata = ThriftValidation.validateColumnFamily(keyspace, column_parent.column_family, true);"
"492","961.txt","if (Float.isInfinite((float)value))","if (Math.abs(value) > Float.MAX_VALUE)","if (!(theValue instanceof java.lang.Double))"
"493","962.txt","Float.isInfinite((float)source)) {","(source > Float.MAX_VALUE || source < -Float.MAX_VALUE)) {","return new Float((float) source);"
"494","997.txt","UnicodeUtil.UTF8toUTF16(input, output);","input.utf8ToChars(output);","UnicodeUtil.UTF16toUTF8(internal, 0, internal.length(), result);"
